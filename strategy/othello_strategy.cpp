#include "strategy.h"
#include <cmath>

namespace Strategy
{
const int MAX_ROLLOUT = 64;

const int ROLLOUT_DEPTH_A[MAX_ROLLOUT] = {
    0,
2,
3,
3,
5,
5,
7,
7,
7,
8,
10,
8,
3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
};

template <>
int DepthFromTurnA<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_A[static_cast<int>(std::round(avgDepth))];
}

const int ROLLOUT_DEPTH_B[MAX_ROLLOUT] = {
    0,
    2,
3,
3,
5,
5,
6,
6,
6,
8,
9,
8,
3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
};

template <>
int DepthFromTurnB<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_B[static_cast<int>(std::round(avgDepth))];
}


const int ROLLOUT_DEPTH_C[MAX_ROLLOUT] = {
    0,
    1,
    3,
    3,
    4,
    4,
    5,
    5,
    5,
    7,
    8,
    7,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

template <>
int DepthFromTurnC<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_C[static_cast<int>(std::round(avgDepth))];
}

const int ROLLOUT_DEPTH_D[MAX_ROLLOUT] = {
    0,
    1,
2,
2,
4,
4,
5,
5,
5,
6,
7,
6,
2,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
};

template <>
int DepthFromTurnD<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_D[static_cast<int>(std::round(avgDepth))];
}

const int ROLLOUT_DEPTH_E[MAX_ROLLOUT] = {
   0,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    4,
    5,
    6,
    5,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

template <>
int DepthFromTurnE<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_E[static_cast<int>(std::round(avgDepth))];
}


const int ROLLOUT_DEPTH_F[MAX_ROLLOUT] = {
    0,
    1,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    4,
    5,
    4,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

template <>
int DepthFromTurnF<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_F[static_cast<int>(std::round(avgDepth))];
}

const int ROLLOUT_DEPTH_G[MAX_ROLLOUT] = {
    0,
    1,
    1,
    1,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    3,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
0    ,
};

template <>
int DepthFromTurnG<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_G[static_cast<int>(std::round(avgDepth))];
}

const int ROLLOUT_DEPTH_H[MAX_ROLLOUT] = {
    0,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

template <>
int DepthFromTurnH<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_H[static_cast<int>(std::round(avgDepth))];
}

const int ROLLOUT_DEPTH_I[MAX_ROLLOUT] = {
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

template <>
int DepthFromTurnI<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_I[static_cast<int>(std::round(avgDepth))];
}

const int ROLLOUT_DEPTH_J[MAX_ROLLOUT] = {
    0,
        0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

template <>
int DepthFromTurnJ<Othello::OthelloState>(double avgDepth)
{
    return ROLLOUT_DEPTH_J[static_cast<int>(std::round(avgDepth))];
}

}