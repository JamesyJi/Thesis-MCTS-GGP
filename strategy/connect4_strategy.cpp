#include "strategy.h"
namespace Strategy
{
const std::size_t MAX_TURNS = 43;

// const int TURN_DEPTH_A[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     1,
//     0,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     1,
//     1,
//     2,
//     1,
//     3,
//     1,
//     3,
//     2,
//     3,
//     2,
//     4,
//     3,
//     4,
//     4,
//     6,
//     7,
//     9,
//     10,
//     10,
//     10,
//     8,
//     7,
//     5,
//     4,
//     2,
//     1,
//     1,
//     1,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnA<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_A[gameState.GetTurn()];
// }

// const int TURN_DEPTH_B[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     1,
//     1,
//     2,
//     1,
//     3,
//     1,
//     2,
//     1,
//     3,
//     2,
//     3,
//     3,
//     4,
//     4,
//     5,
//     6,
//     8,
//     9,
//     9,
//     9,
//     7,
//     6,
//     4,
//     3,
//     2,
//     1,
//     1,
//     1,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnB<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_B[gameState.GetTurn()];
// }

// const int TURN_DEPTH_C[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     1,
//     1,
//     2,
//     1,
//     2,
//     1,
//     2,
//     1,
//     3,
//     2,
//     3,
//     2,
//     3,
//     3,
//     5,
//     5,
//     7,
//     8,
//     8,
//     8,
//     6,
//     6,
//     4,
//     3,
//     1,
//     1,
//     1,
//     0,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnC<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_C[gameState.GetTurn()];
// }

// const int TURN_DEPTH_D[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     1,
//     1,
//     2,
//     1,
//     2,
//     1,
//     2,
//     1,
//     2,
//     2,
//     3,
//     2,
//     3,
//     3,
//     4,
//     5,
//     6,
//     7,
//     7,
//     7,
//     6,
//     5,
//     3,
//     3,
//     1,
//     1,
//     1,
//     0,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnD<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_D[gameState.GetTurn()];
// }

// const int TURN_DEPTH_E[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     1,
//     0,
//     1,
//     0,
//     2,
//     1,
//     2,
//     1,
//     2,
//     1,
//     2,
//     2,
//     2,
//     2,
//     4,
//     4,
//     5,
//     6,
//     6,
//     6,
//     5,
//     4,
//     3,
//     2,
//     1,
//     1,
//     0,
//     0,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnE<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_E[gameState.GetTurn()];
// }

// const int TURN_DEPTH_F[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     1,
//     0,
//     1,
//     1,
//     2,
//     1,
//     2,
//     1,
//     2,
//     2,
//     3,
//     3,
//     4,
//     5,
//     5,
//     5,
//     4,
//     4,
//     2,
//     2,
//     1,
//     1,
//     0,
//     0,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnF<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_F[gameState.GetTurn()];
// }

// const int TURN_DEPTH_G[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     1,
//     0,
//     1,
//     1,
//     1,
//     1,
//     2,
//     1,
//     2,
//     2,
//     2,
//     3,
//     3,
//     4,
//     4,
//     4,
//     3,
//     3,
//     2,
//     1,
//     1,
//     1,
//     0,
//     0,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnG<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_G[gameState.GetTurn()];
// }

// const int TURN_DEPTH_H[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     1,
//     0,
//     1,
//     0,
//     1,
//     1,
//     1,
//     1,
//     1,
//     1,
//     2,
//     2,
//     3,
//     3,
//     3,
//     3,
//     2,
//     2,
//     1,
//     1,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnH<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_H[gameState.GetTurn()];
// }

// const int TURN_DEPTH_I[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     0,
//     1,
//     0,
//     1,
//     0,
//     1,
//     1,
//     1,
//     1,
//     1,
//     1,
//     2,
//     2,
//     2,
//     2,
//     2,
//     1,
//     1,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnI<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_I[gameState.GetTurn()];
// }

// const int TURN_DEPTH_J[MAX_TURNS] = {
//     -1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     1,
//     1,
//     1,
//     1,
//     1,
//     1,
//     1,
//     1,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
//     0,
// };

// template <>
// int DepthFromTurnJ<Connect4::Connect4State>(const Games::GameState& gameState)
// {
//     return TURN_DEPTH_J[gameState.GetTurn()];
// }

}